<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.myproject.catchtable.mapper.ReviewMapper">

	<!-- 리뷰 조회 -->
	<select id="findById" parameterType="int" resultType="Review">
		SELECT *
		FROM reviews WHERE review_id = #{reviewId}
	</select>

	<select id="findByUserId" parameterType="int"
		resultType="Review">
		SELECT * FROM reviews WHERE user_id = #{userId} ORDER BY
		created_at DESC
	</select>
	<select id="findByUserIdWithRestaurant" parameterType="int" resultType="map">
    SELECT 
        r.review_id AS reviewId,
        r.user_id AS userId,
        r.restaurant_id AS restaurantId,
        r.reservation_id AS reservationId,
        r.rating,
        r.content,
        r.image_url AS imageUrl,
        r.is_recommended AS isRecommended,
        r.created_at AS createdAt,
        r.updated_at AS updatedAt,
        rest.name AS restaurantName
    FROM reviews r
    JOIN restaurants rest ON r.restaurant_id = rest.restaurant_id
    WHERE r.user_id = #{userId}
    ORDER BY r.created_at DESC
</select>

	<!-- 식당별 리뷰 조회 (email 포함) -->
	<select id="findByRestaurantIdWithEmail" parameterType="int"
		resultType="Review">
		SELECT r.review_id, r.user_id, r.restaurant_id, r.rating,
		r.content, r.created_at, r.is_recommended,
		u.email
		FROM reviews r
		JOIN
		users u ON r.user_id = u.user_id
		WHERE r.restaurant_id =
		#{restaurantId}
		ORDER BY r.created_at DESC
	</select>


	<!-- 식당별 리뷰 목록 조회 (사용자 정보 포함) -->
	<select id="findByRestaurantIdWithUserInfo" parameterType="int"
		resultType="Review">
		SELECT r.*, u.name as userName, u.email as userEmail
		FROM reviews r
		LEFT JOIN users u ON r.user_id = u.user_id
		WHERE r.restaurant_id = #{restaurantId}
		ORDER BY r.created_at DESC
	</select>

	<select id="getOverallAverageRating"
		resultType="java.lang.Double">
		SELECT AVG(CAST(rating AS DECIMAL(3,2)))
		FROM reviews
		WHERE
		rating IS NOT NULL AND rating > 0
	</select>

	<select id="findByReservationId" parameterType="int"
		resultType="Review">
		SELECT * FROM reviews WHERE reservation_id =
		#{reservationId}
	</select>

	<!-- 리뷰 등록 -->
	<insert id="insertReview" parameterType="Review"
		useGeneratedKeys="true" keyProperty="reviewId">
		INSERT INTO reviews (
		user_id,
		restaurant_id, reservation_id, rating,
		content, image_url,
		is_recommended
		) VALUES (
		#{userId}, #{restaurantId}, #{reservationId},
		#{rating},
		#{content}, #{imageUrl}, #{isRecommended}
		)
	</insert>

	<!-- 리뷰 수정 -->
	<update id="updateReview" parameterType="Review">
		UPDATE reviews SET
		rating = #{rating},
		content = #{content},
		image_url = #{imageUrl},
		is_recommended = #{isRecommended},
		updated_at = NOW()
		WHERE review_id =
		#{reviewId}
	</update>

	<!-- 리뷰 삭제 -->
	<delete id="deleteReview" parameterType="int">
		DELETE FROM reviews
		WHERE review_id = #{reviewId}
	</delete>

	<!-- 리뷰 통계 -->
	<select id="getAverageRatingByRestaurantId" parameterType="int"
		resultType="double">
		SELECT AVG(rating) FROM reviews WHERE restaurant_id =
		#{restaurantId}
	</select>

	<select id="countByRestaurantId" parameterType="int"
		resultType="int">
		SELECT COUNT(*) FROM reviews WHERE restaurant_id =
		#{restaurantId}
	</select>

	<!-- 리뷰 목록 (정렬) -->
	<select id="findByRestaurantIdOrderByCreatedDesc"
		parameterType="int" resultType="Review">
		SELECT * FROM reviews
		WHERE
		restaurant_id = #{restaurantId}
		ORDER BY created_at DESC
	</select>

	<select id="findByRestaurantIdOrderByRatingDesc"
		parameterType="int" resultType="Review">
		SELECT * FROM reviews
		WHERE
		restaurant_id = #{restaurantId}
		ORDER BY rating DESC, created_at DESC
	</select>

	<select id="findRecommendedReviews" parameterType="int"
		resultType="Review">
		SELECT * FROM reviews
		WHERE restaurant_id = #{restaurantId}
		AND is_recommended = TRUE
		ORDER BY created_at DESC
	</select>

	<!-- 최신 리뷰 -->
	<select id="findRecentReviews" resultType="Review">
		SELECT r.review_id,
		r.user_id, r.restaurant_id, r.rating,
		r.content, r.created_at,
		r.is_recommended,
		u.email
		FROM reviews r
		JOIN users u ON r.user_id =
		u.user_id
		ORDER BY r.created_at DESC
		LIMIT #{limit}
	</select>

	<!-- 평점별 조회 -->
	<select id="findByRating" parameterType="int"
		resultType="Review">
		SELECT * FROM reviews WHERE rating = #{rating} ORDER BY
		created_at DESC
	</select>

	<select id="findHighRatedReviews" parameterType="int"
		resultType="Review">
		SELECT * FROM reviews
		WHERE restaurant_id = #{restaurantId}
		AND rating >= 4
		ORDER BY rating DESC, created_at DESC
	</select>


</mapper>