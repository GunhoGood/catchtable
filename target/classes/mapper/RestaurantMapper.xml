<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper
	namespace="com.myproject.catchtable.mapper.RestaurantMapper">

	<!-- 식당 조회 -->
	<select id="findById" parameterType="int"
		resultType="Restaurant">
		SELECT * FROM restaurants WHERE restaurant_id =
		#{restaurantId}
	</select>

	<select id="findAll" resultType="Restaurant">
		SELECT * FROM restaurants ORDER
		BY created_at DESC
	</select>

	<select id="findByBusinessUserId" parameterType="int"
		resultType="Restaurant">
		SELECT * FROM restaurants WHERE business_user_id =
		#{businessUserId}
	</select>

	<select id="findByCategoryId" parameterType="int"
		resultType="Restaurant">
		SELECT * FROM restaurants WHERE category_id = #{categoryId}
	</select>

	<select id="findByPriceRange" parameterType="string"
		resultType="Restaurant">
		SELECT * FROM restaurants WHERE price_range = #{priceRange}
	</select>

	<select id="findByCuisineType" parameterType="string"
		resultType="Restaurant">
		SELECT * FROM restaurants WHERE cuisine_type =
		#{cuisineType}
	</select>

	<!-- 식당 등록 -->
	<insert id="insertRestaurant" parameterType="Restaurant"
		useGeneratedKeys="true" keyProperty="restaurantId">
		INSERT INTO restaurants (
		business_user_id, name, description, category_id, cuisine_type,
		address, phone, operating_hours, price_range, likes_count,
		reservation_count, view_count, image_url
		) VALUES (
		#{businessUserId},
		#{name}, #{description}, #{categoryId}, #{cuisineType},
		#{address},
		#{phone}, #{operatingHours}, #{priceRange}, #{likesCount},
		#{reservationCount}, #{viewCount}, #{imageUrl}
		)
	</insert>

	<!-- 식당 수정 -->
	<update id="updateRestaurant" parameterType="Restaurant">
		UPDATE restaurants
		SET
		name = #{name},
		description = #{description},
		category_id =
		#{categoryId},
		cuisine_type = #{cuisineType},
		address = #{address},
		phone = #{phone},
		operating_hours = #{operatingHours},
		price_range =
		#{priceRange},
		image_url = #{imageUrl},
		updated_at = NOW()
		WHERE
		restaurant_id = #{restaurantId}
	</update>

	<!-- 식당 삭제 -->
	<delete id="deleteRestaurant" parameterType="int">
		DELETE FROM
		restaurants WHERE restaurant_id = #{restaurantId}
	</delete>

	<!-- 카운트 업데이트 -->
	<update id="incrementViewCount" parameterType="int">
		UPDATE restaurants
		SET
		view_count = view_count + 1,
		updated_at = NOW()
		WHERE restaurant_id =
		#{restaurantId}
	</update>

	<update id="incrementLikesCount" parameterType="int">
		UPDATE
		restaurants SET
		likes_count = likes_count + 1,
		updated_at = NOW()
		WHERE
		restaurant_id = #{restaurantId}
	</update>

	<update id="decrementLikesCount" parameterType="int">
		UPDATE
		restaurants SET
		likes_count = GREATEST(likes_count - 1, 0),
		updated_at =
		NOW()
		WHERE restaurant_id = #{restaurantId}
	</update>

	<update id="incrementReservationCount" parameterType="int">
		UPDATE
		restaurants SET
		reservation_count = reservation_count + 1,
		updated_at =
		NOW()
		WHERE restaurant_id = #{restaurantId}
	</update>

	<!-- 검색 -->
	<select id="searchByName" parameterType="string"
		resultType="Restaurant">
		SELECT * FROM restaurants
		WHERE name LIKE CONCAT('%',
		#{name}, '%')
		ORDER BY name
	</select>

	<select id="searchByAddress" parameterType="string"
		resultType="Restaurant">
		SELECT * FROM restaurants
		WHERE address LIKE CONCAT('%',
		#{address}, '%')
		ORDER BY name
	</select>

	<!-- 정렬 -->
	<select id="findAllOrderByLikesDesc" resultType="Restaurant">
		SELECT * FROM
		restaurants ORDER BY likes_count DESC, created_at DESC
	</select>

	<select id="findAllOrderByReservationDesc"
		resultType="Restaurant">
		SELECT * FROM restaurants ORDER BY reservation_count DESC,
		created_at DESC
	</select>

	<select id="findAllOrderByViewDesc" resultType="Restaurant">
		SELECT * FROM
		restaurants ORDER BY view_count DESC, created_at DESC
	</select>

	<!-- 인기 식당 -->
	<select id="findTopRestaurants" parameterType="int"
		resultType="Restaurant">
		SELECT * FROM restaurants
		ORDER BY (view_count +
		reservation_count * 2 + likes_count * 3) DESC
		LIMIT #{limit}
	</select>

	<select id="findAllCategories" resultType="Category">
		SELECT category_id,
		name, icon_url
		FROM categories
		ORDER BY category_id
	</select>

	<!-- 해당 식당의 모든 리뷰 삭제 -->
	<delete id="deleteReviewsByRestaurant" parameterType="int">
		DELETE FROM
		reviews
		WHERE restaurant_id = #{restaurantId}
	</delete>

	<!-- 해당 식당의 모든 예약 삭제 -->
	<delete id="deleteReservationsByRestaurant" parameterType="int">
		DELETE FROM reservations
		WHERE restaurant_id = #{restaurantId}
	</delete>

	<!-- 메뉴 목록 조회 -->
	<select id="findMenusByRestaurantId" parameterType="int"
		resultType="Menu">
		SELECT menu_id, restaurant_id, name, description, price,
		category, image_url, is_signature, is_available
		FROM menus
		WHERE
		restaurant_id = #{restaurantId}
		ORDER BY menu_id
	</select>

	<!-- 메뉴 추가 -->
	<insert id="insertMenu" parameterType="Menu">
		INSERT INTO menus
		(restaurant_id, name, description, price, category,
		image_url,
		is_signature, is_available)
		VALUES (#{restaurantId}, #{name},
		#{description}, #{price}, #{category},
		#{imageUrl}, #{isSignature},
		#{isAvailable})
	</insert>
	<!-- 메뉴 ID로 조회 -->
	<select id="findMenuById" parameterType="int" resultType="Menu">
		SELECT
		* FROM menus WHERE menu_id = #{menuId}
	</select>

	<!-- 메뉴 수정 -->
	<update id="updateMenu" parameterType="Menu">
		UPDATE menus SET
		name =
		#{name},
		description = #{description},
		price = #{price},
		category =
		#{category},
		image_url = #{imageUrl},
		is_signature = #{isSignature},
		is_available = #{isAvailable}
		WHERE menu_id = #{menuId}
	</update>
	<!-- 메뉴 삭제 -->
	<delete id="deleteMenu" parameterType="int">
		DELETE FROM menus WHERE
		menu_id = #{menuId}
	</delete>


	<!-- 필터링된 레스토랑 목록 조회 -->
	<select id="findFilteredRestaurants" parameterType="map"
		resultType="com.myproject.catchtable.model.Restaurant">
		SELECT * FROM restaurants
		<where>
			<if test="category != null and category != ''">
				AND category_id = #{category}
			</if>
			<if test="price != null and price != ''">
				AND price_range = #{price}
			</if>
			<if test="location != null and location != ''">
				AND address LIKE CONCAT('%', #{location}, '%')
			</if>
			<if test="search != null and search != ''">
				AND (name LIKE CONCAT('%', #{search}, '%') OR address LIKE CONCAT('%',
				#{search}, '%'))
			</if>
		</where>
		<choose>
			<when test="sort == 'popular'">
				ORDER BY (likes_count + reservation_count) DESC, created_at DESC
			</when>
			<when test="sort == 'rating'">
				ORDER BY likes_count DESC, created_at DESC
			</when>
			<when test="sort == 'likes'">
				ORDER BY likes_count DESC, created_at DESC
			</when>
			<otherwise>
				ORDER BY created_at DESC
			</otherwise>
		</choose>
		<if test="limit != null and offset != null">
			LIMIT #{limit} OFFSET #{offset}
		</if>
	</select>

	<!-- 필터링된 레스토랑 개수 조회 -->
	<select id="countFilteredRestaurants" parameterType="map"
		resultType="int">
		SELECT COUNT(*) FROM restaurants
		<where>
			<if test="category != null and category != ''">
				AND category_id = #{category}
			</if>
			<if test="price != null and price != ''">
				AND price_range = #{price}
			</if>
			<if test="location != null and location != ''">
				AND address LIKE CONCAT('%', #{location}, '%')
			</if>
			<if test="search != null and search != ''">
				AND (name LIKE CONCAT('%', #{search}, '%') OR address LIKE CONCAT('%',
				#{search}, '%'))
			</if>
		</where>
	</select>

	<!-- 추천 레스토랑 조회 -->
	<select id="findFeaturedRestaurants" parameterType="int"
		resultType="com.myproject.catchtable.model.Restaurant">
		SELECT * FROM restaurants
		ORDER BY (likes_count + reservation_count) DESC, created_at DESC
		LIMIT #{limit}
	</select>

	<!-- 최신 레스토랑 조회 -->
	<select id="findLatestRestaurants" parameterType="int"
		resultType="com.myproject.catchtable.model.Restaurant">
		SELECT * FROM restaurants
		ORDER BY created_at DESC
		LIMIT #{limit}
	</select>
</mapper>