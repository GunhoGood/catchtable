<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper
	namespace="com.myproject.catchtable.mapper.ReservationMapper">

	<!-- 예약 ID로 조회 -->
	<select id="findById" parameterType="int"
		resultType="Reservation">
		SELECT * FROM reservations WHERE reservation_id =
		#{reservationId}
	</select>

	<!-- 사용자별 예약 목록 조회 -->
	<select id="findByUserId" parameterType="int"
		resultType="Reservation">
		SELECT * FROM reservations WHERE user_id = #{userId} ORDER
		BY
		reservation_date DESC
	</select>

	<!-- 식당별 예약 목록 조회 -->
	<select id="findByRestaurantId" parameterType="int"
		resultType="Reservation">
		SELECT * FROM reservations WHERE restaurant_id =
		#{restaurantId} ORDER BY
		reservation_date DESC
	</select>

	<!-- 날짜별 예약 목록 조회 -->
	<select id="findByDate" parameterType="java.time.LocalDate"
		resultType="Reservation">
		SELECT * FROM reservations WHERE reservation_date =
		#{reservationDate}
	</select>

	<!-- 식당과 날짜로 예약 조회 -->
	<select id="findByRestaurantAndDate" resultType="Reservation">
		SELECT * FROM
		reservations
		WHERE restaurant_id = #{restaurantId} AND reservation_date
		= #{reservationDate}
		ORDER BY reservation_hour
	</select>

	<!-- 사업자별 예약 목록 조회 -->
	<select id="findByBusinessIdWithFilters"
		resultType="Reservation">
		SELECT r.*, u.name as userName, u.phone as userPhone, u.email as
		userEmail,
		rest.name as restaurantName
		FROM reservations r
		JOIN users u ON r.user_id =
		u.user_id
		JOIN restaurants rest ON r.restaurant_id = rest.restaurant_id
		WHERE r.restaurant_id IN
		<foreach collection="restaurantIds" item="id" open="("
			separator="," close=")">
			#{id}
		</foreach>
		<if test="status != null and status != 'ALL'">
			<choose>
				<when test="status == 'PENDING'">
					AND r.is_confirmed = 0 AND r.is_cancelled = 0 AND
					r.is_completed = 0
				</when>
				<when test="status == 'CONFIRMED'">
					AND r.is_confirmed = 1 AND r.is_cancelled = 0 AND
					r.is_completed = 0
				</when>
				<when test="status == 'COMPLETED'">
					AND r.is_completed = 1
				</when>
				<when test="status == 'CANCELLED'">
					AND r.is_cancelled = 1
				</when>
			</choose>
		</if>
		<if test="restaurantId != null and restaurantId != ''">
			AND r.restaurant_id = #{restaurantId}
		</if>
		<if test="date != null and date != ''">
			AND r.reservation_date = #{date}
		</if>
		ORDER BY r.reservation_date DESC, r.reservation_hour DESC,
		r.created_at DESC
	</select>

	<!-- 예약 상세 정보 조회 -->
	<select id="findByIdWithDetails" resultType="Reservation">
		SELECT r.*, u.name
		as userName, u.phone as userPhone, u.email as userEmail,
		rest.name as restaurantName
		FROM reservations r
		JOIN users u ON r.user_id =
		u.user_id
		JOIN restaurants rest ON r.restaurant_id = rest.restaurant_id
		WHERE r.reservation_id = #{reservationId}
	</select>

	<!-- 예약 등록 -->
	<insert id="insertReservation" parameterType="Reservation"
		useGeneratedKeys="true" keyProperty="reservationId">
		INSERT INTO reservations (
		user_id, restaurant_id, reservation_date, reservation_hour,
		party_size, special_request, is_confirmed, is_cancelled, is_completed
		) VALUES (
		#{userId}, #{restaurantId}, #{reservationDate},
		#{reservationHour},
		#{partySize}, #{specialRequest}, #{isConfirmed},
		#{isCancelled},
		#{isCompleted}
		)
	</insert>

	<!-- 예약 정보 수정 -->
	<update id="updateReservation" parameterType="Reservation">
		UPDATE reservations
		SET
		reservation_date = #{reservationDate},
		reservation_hour =
		#{reservationHour},
		party_size = #{partySize},
		special_request =
		#{specialRequest},
		is_confirmed = #{isConfirmed},
		is_cancelled =
		#{isCancelled},
		is_completed = #{isCompleted},
		updated_at = NOW()
		WHERE
		reservation_id = #{reservationId}
	</update>

	<!-- 예약 삭제 -->
	<delete id="deleteReservation" parameterType="int">
		DELETE FROM
		reservations WHERE reservation_id = #{reservationId}
	</delete>

	<!-- 예약 확정 -->
	<update id="confirmReservation" parameterType="int">
		UPDATE
		reservations SET
		is_confirmed = TRUE,
		updated_at = NOW()
		WHERE
		reservation_id = #{reservationId}
	</update>

	<!-- 예약 취소 -->
	<update id="cancelReservation" parameterType="int">
		UPDATE reservations
		SET
		is_cancelled = TRUE,
		updated_at = NOW()
		WHERE reservation_id =
		#{reservationId}
	</update>

	<!-- 예약 완료 처리 -->
	<update id="completeReservation" parameterType="int">
		UPDATE
		reservations SET
		is_completed = TRUE,
		updated_at = NOW()
		WHERE
		reservation_id = #{reservationId}
	</update>

	<!-- 예약 취소 처리 -->
	<update id="cancelReservationWithReason">
		UPDATE reservations
		SET is_cancelled = 1,
		updated_at = CURRENT_TIMESTAMP
		<if test="reason != null and reason != ''">
			, special_request = CONCAT(COALESCE(special_request, ''), ' [취소사유: ',
			#{reason}, ']')
		</if>
		WHERE reservation_id = #{reservationId}
	</update>

	<!-- 대기 중인 예약 목록 조회 -->
	<select id="findPendingReservations" resultType="Reservation">
		SELECT r.*,
		u.name as userName, u.phone as userPhone, u.email as userEmail,
		rest.name as restaurantName
		FROM reservations r
		JOIN users u ON
		r.user_id = u.user_id
		JOIN restaurants rest ON r.restaurant_id =
		rest.restaurant_id
		WHERE r.is_confirmed = FALSE AND r.is_cancelled =
		FALSE AND r.is_completed = FALSE
		ORDER BY r.created_at ASC
	</select>

	<!-- 오늘 예약 목록 조회 -->
	<select id="findTodayReservations" resultType="Reservation">
		SELECT r.*, u.name
		as userName, u.phone as userPhone, u.email as userEmail,
		rest.name as restaurantName
		FROM reservations r
		JOIN users u ON r.user_id =
		u.user_id
		JOIN restaurants rest ON r.restaurant_id = rest.restaurant_id
		WHERE r.reservation_date = CURDATE()
		AND r.is_confirmed = 1 AND
		r.is_cancelled = 0
		ORDER BY r.reservation_hour ASC
	</select>

	<!-- 사용자 예정 예약 목록 조회 -->
	<select id="findUpcomingReservations" parameterType="int"
		resultType="Reservation">
		SELECT r.*, rest.name as restaurantName
		FROM reservations r
		JOIN restaurants rest ON r.restaurant_id = rest.restaurant_id
		WHERE
		r.user_id = #{userId}
		AND r.reservation_date >= CURDATE()
		AND
		r.is_cancelled = FALSE
		ORDER BY r.reservation_date ASC,
		r.reservation_hour ASC
	</select>

	<!-- 예약된 시간 조회 -->
	<select id="findBookedHours" resultType="string">
		SELECT reservation_hour
		FROM reservations
		WHERE restaurant_id = #{restaurantId}
		AND
		reservation_date = #{reservationDate}
		AND is_cancelled = FALSE
	</select>

	<!-- 식당별 예약 수 조회 -->
	<select id="countByRestaurantId" parameterType="int"
		resultType="int">
		SELECT COUNT(*) FROM reservations WHERE restaurant_id =
		#{restaurantId}
	</select>

	<!-- 사용자별 예약 수 조회 -->
	<select id="countByUserId" parameterType="int" resultType="int">
		SELECT COUNT(*) FROM reservations WHERE user_id = #{userId}
	</select>

	<!-- 사업자별 총 예약 수 조회 -->
	<select id="countReservationsByRestaurantIds" resultType="int">
		SELECT COUNT(*)
		FROM reservations
		WHERE restaurant_id IN
		<foreach collection="restaurantIds" item="id" open="("
			separator="," close=")">
			#{id}
		</foreach>
	</select>

	<!-- 사업자별 상태별 예약 수 조회 -->
	<select id="countReservationsByStatusAndRestaurantIds"
		resultType="int">
		SELECT COUNT(*)
		FROM reservations
		WHERE restaurant_id IN
		<foreach collection="restaurantIds" item="id" open="("
			separator="," close=")">
			#{id}
		</foreach>
		<choose>
			<when test="status == 'PENDING'">
				AND is_confirmed = 0 AND is_cancelled = 0 AND
				is_completed = 0
			</when>
			<when test="status == 'CONFIRMED'">
				AND is_confirmed = 1 AND is_cancelled = 0 AND
				is_completed = 0
			</when>
			<when test="status == 'COMPLETED'">
				AND is_completed = 1
			</when>
			<when test="status == 'CANCELLED'">
				AND is_cancelled = 1
			</when>
		</choose>
	</select>

	<!-- 사업자별 오늘 예약 수 조회 -->
	<select id="countTodayReservationsByRestaurantIds"
		resultType="int">
		SELECT COUNT(*)
		FROM reservations
		WHERE restaurant_id IN
		<foreach collection="restaurantIds" item="id" open="("
			separator="," close=")">
			#{id}
		</foreach>
		AND reservation_date = #{today}
	</select>

	<!-- 식당별 예약 목록 조회 -->
	<select id="findByRestaurantIdOrderByDateDesc"
		parameterType="int" resultType="Reservation">
		SELECT r.*, u.name as userName, u.phone
		as userPhone, u.email as userEmail
		FROM reservations r
		JOIN users u ON
		r.user_id = u.user_id
		WHERE r.restaurant_id = #{restaurantId}
		ORDER BY
		r.reservation_date DESC, r.reservation_hour DESC, r.created_at DESC
	</select>

	<!-- 사용자의 단골 레스토랑 조회 (3회 이상 방문) - 디버깅 버전 -->
<select id="findFavoriteRestaurants" resultType="map">
    SELECT 
        r.restaurant_id as restaurantId,
        r.name,
        r.cuisine_type as cuisineType,
        r.address,
        r.image_url as imageUrl,
        COUNT(res.reservation_id) as visitCount
    FROM restaurants r
    INNER JOIN reservations res ON r.restaurant_id = res.restaurant_id
    WHERE res.user_id = #{userId}
      AND (res.is_completed = 1 OR res.is_completed = true)
    GROUP BY r.restaurant_id, r.name, r.cuisine_type, r.address, r.image_url
    HAVING COUNT(res.reservation_id) >= #{minVisits}
    ORDER BY visitCount DESC, r.name ASC
</select>



</mapper>